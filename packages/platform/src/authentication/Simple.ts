import { Service } from '../core/index';

/**
 * Local authentication
 *
 * Zetapush local authentication
 *  The configurer can choose the primary key and mandatory user fields for account creation
 *  The field 'zetapushKey' is generated by the server and MUST not be used : it contains the unique key of the user inside a sandbox (it can be obtained from inside a macro with the <b>__userKey</b> pseudo-constant)
 * */
/**
 * End-user API for the simple local authentication
 *
 * These API verbs allow end-users to manage their account.
 * @access public
 * */
export class Simple extends Service {
  /**
   * Get deployment type associated to Simple service
   * @return {string}
   */
  static get DEPLOYMENT_TYPE() {
    return 'simple';
  }
  /**
   * Get default deployment id associated to Simple service
   * @return {string}
   */
  static get DEFAULT_DEPLOYMENT_ID() {
    return `${Simple.DEPLOYMENT_TYPE}_0`;
  }
  changePassword({ token, key, password }) {
    return this.$publish('changePassword', { token, key, password });
  }
  checkPassword({ key, password }) {
    return this.$publish('checkPassword', { key, password });
  }
  checkUser({ key, softFail }) {
    return this.$publish('checkUser', { key, softFail });
  }
  createUser(profile) {
    return this.$publish('createUser', profile);
  }
  credentials({ owner }) {
    return this.$publish('credentials', { owner });
  }
  deleteUser({ key, softFail }) {
    return this.$publish('deleteUser', { key, softFail });
  }
  requestReset({ key }) {
    return this.$publish('requestReset', { key });
  }
  updateKey({ newKey, oldKey, owner }) {
    return this.$publish('updateKey', { newKey, oldKey, owner });
  }
  updateUser(profile) {
    return this.$publish('updateUser', profile);
  }
}
